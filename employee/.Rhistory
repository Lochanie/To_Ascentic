#.................................................................................................................................
new_merged[!duplicated(new_merged[,c('AvailabilityOfTransportNearTheResidence')]),]
response_list=list('No','Yes')
i=0
for (d in response_list){
print (d)
new_merged$AvailabilityOfTransportNearTheResidence[which(new_merged$AvailabilityOfTransportNearTheResidence == d)] <- i
i=i+1
}
#.................................................................................................................................
new_merged[!duplicated(new_merged[,c('Selection')]),]
response_list=list('No','Yes','Pending')
i=0
for (d in response_list){
print (d)
new_merged$Selection[which(new_merged$Selection == d)] <- i
i=i+1
}
#.................................................................................................................................
new_merged[!duplicated(new_merged[,c('ReasonForChoosingApparel')]),]
response_list=list('Like Sewing','Other','Family members are working in Apparel',"Couldn't find another job","Close Proximity to home")
i=0
for (d in response_list){
print (d)
new_merged$ReasonForChoosingApparel[which(new_merged$ReasonForChoosingApparel == d)] <- i
i=i+1
}
#.................................................................................................................................
new_merged[!duplicated(new_merged[,c('ContributionToTheFamilyIncome')]),]
response_list=list('No Contribution','High Contribution','Moderate Contribution',"Total Contribution","Less Contribution")
i=0
for (d in response_list){
print (d)
new_merged$ContributionToTheFamilyIncome[which(new_merged$ContributionToTheFamilyIncome== d)] <- i
i=i+1
}
#.................................................................................................................................
new_merged[!duplicated(new_merged[,c('PersonalImpression')]),]
response_list=list('Bad','Average','Good')
i=0
for (d in response_list){
print (d)
new_merged$PersonalImpression[which(new_merged$PersonalImpression== d)] <- i
i=i+1
}
#.................................................................................................................................
new_merged[!duplicated(new_merged[,c('AccommodationFee')]),]
response_list=list('1500/= or Less than 1500/=','Over 1500/= and 3000/= or below','Over 3000/= and 4500/= or below','Over 4500/= and 6000/= or below',' Over 6000/=')
i=1
for (d in response_list){
print (d)
new_merged$AccommodationFee[which(new_merged$AccommodationFee== d)] <- i
i=i+1
}
#.................................................................................................................................
new_merged[!duplicated(new_merged[,c('RetentionCategory')]),]
response_list=list('A','B','C','D')
i=1
for (d in response_list){
print (d)
new_merged$RetentionCategory[which(new_merged$RetentionCategory== d)] <- i
i=i+1
}
#.................................................................................................................................
new_merged[!duplicated(new_merged[,c('SelectedDepartment')]),]
response_list=list('TM (Checker)','TM (MO)','TM (HS)','TM (Packing)','TM (SA)')
i=1
for (d in response_list){
print (d)
new_merged$SelectedDepartment[which(new_merged$SelectedDepartment== d)] <- i
i=i+1
}
#.................................................................................................................................
new_merged[!duplicated(new_merged[,c('ApparelExperience')]),]
response_list=list('FALSE','TRUE')
i=0
for (d in response_list){
print (d)
new_merged$ApparelExperience[which(new_merged$ApparelExperience== d)] <- i
i=i+1
}
#.................................................................................................................................
new_merged[!duplicated(new_merged[,c('ReasonForLeaving')]),]
response_list=list('Other','Overseas Job','Work-Life Balance Issue','Not a Satisfied Salary','Travelling Issue','Maternity','Work Load/High Stress','No Career Progression','Marriage','Changing the residence')
i=1
for (d in response_list){
print (d)
new_merged$ReasonForLeaving[which(new_merged$ReasonForLeaving== d)] <- i
i=i+1
}
#.................................................................................................................................
new_merged[!duplicated(new_merged[,c('MedicalTest')]),]
response_list=list('Failed','Passed')
i=0
for (d in response_list){
print (d)
new_merged$MedicalTest[which(new_merged$MedicalTest== d)] <- i
i=i+1
}
#.................................................................................................................................
new_merged[!duplicated(new_merged[,c('FollowingExternalCourses')]),]
response_list=list('No','Expect','Yes')
i=0
for (d in response_list){
print (d)
new_merged$FollowingExternalCourses[which(new_merged$FollowingExternalCourses== d)] <- i
i=i+1
}
#.................................................................................................................................
#Rejection reason and reason for leaving both reflects the same impression. Reason for quit the job opportunity.Therefore, decided to drop the Rejection reason column
#since it provide same reason repetitively.And PRT column also dropped.It consists of the name of the interviewer.
drops <- c("PRT","RejectionReason")
new_merged_1<-new_merged[ , !(names(new_merged) %in% drops)]
head(new_merged_1)
write.csv(new_merged_1,"D:/Employee/Transformed_interview_data.csv", row.names = FALSE)
#.................................................................................................................................
#The new_merged_1 data set consists of details of interviwers who got selected and not selected both.But we want to get the details of people who get selected and
#quit the job. Therefore we can delete the rows which selection column==0 and pending value==2.
new_merged_2<-new_merged_1[!(new_merged_1$Selection=="0"),]
new_merged_3<-new_merged_2[!(new_merged_2$Selection=="2"),]
#ensure whther all unnessary rows are removed or not
nrow(new_merged_3)
new_merged_3[!duplicated(new_merged_3[,c('Selection')]),]
write.csv(new_merged_3,"D:/Employee/Transformed_interview_data_2.csv", row.names = FALSE)
#........................................................Recognizing and replacing missing Values......................................................
#Find missing values in merged_per_res data frame
names(merged_per_res)
sum(is.na(merged_per_res))
#There are 2594 N/A values is in this data frame. Find these values are in which columns.
sum(is.na(merged_per_res$Gender))
sum(is.na(merged_per_res$PermanentResidenceDistrict))
sum(is.na(merged_per_res$Residence))
sum(is.na(merged_per_res$CivilStatus))
sum(is.na(merged_per_res$HighestEducationalQualification))
sum(is.na(merged_per_res$ID))
#All the N/A values are in the ID column.Since there is an another column for participant recognition we can remove this column.
drops <- c("ID")
merged_per_res_1<-merged_per_res[ , !(names(merged_per_res) %in% drops)]
head(merged_per_res_1)
#Find whther there is an any empty rows in this data set
merged_per_res_1$Gender[merged_per_res_1$Gender == ""] <- NA
merged_per_res_1$PermanentResidenceDistrict[merged_per_res_1$PermanentResidenceDistrict == ""] <- NA
merged_per_res_1$Residence[merged_per_res_1$Residence == ""] <- NA
merged_per_res_1$CivilStatus[merged_per_res_1$CivilStatus == ""] <- NA
merged_per_res_1$HighestEducationalQualification[merged_per_res_1$HighestEducationalQualification == ""] <- NA
sum(is.na(merged_per_res_1$Gender))
sum(is.na(merged_per_res_1$PermanentResidenceDistrict))
sum(is.na(merged_per_res_1$Residence))
sum(is.na(merged_per_res_1$CivilStatus))
sum(is.na(merged_per_res_1$HighestEducationalQualification))
sum(is.na(merged_per_res_1$ReferenceNumber))
#Now merged_per_res_1 data frame is with no missing data.
write.csv(merged_per_res_1,"D:/Employee/Transformed_employee_data_nomissing.csv", row.names = FALSE)
#.................................................................................................................................
#Find empty and missing values in new_merged_3 data frame
#First we find whther we have columns with N/A values
names(new_merged_3)
sum(is.na(new_merged_3$ExtraCurricularActivities))
sum(is.na(new_merged_3$ApparelRelatedVocationalQualification))
sum(is.na(new_merged_3$PreviousJob))
sum(is.na(new_merged_3$ExperienceSection))
sum(is.na(new_merged_3$RelativesInApparel))
sum(is.na(new_merged_3$SpousesOccupation))
sum(is.na(new_merged_3$FamilyOpinionAboutTheJob))
sum(is.na(new_merged_3$Referel))
sum(is.na(new_merged_3$ExpectationOfDoingTheJob))
sum(is.na(new_merged_3$AvailabilityOfTransportNearTheResidence))
sum(is.na(new_merged_3$ReasonForChoosingApparel))
sum(is.na(new_merged_3$ContributionToTheFamilyIncome))
sum(is.na(new_merged_3$PersonalImpression))
sum(is.na(new_merged_3$AccommodationFee))
sum(is.na(new_merged_3$RetentionCategory))
sum(is.na(new_merged_3$SelectedDepartment))
sum(is.na(new_merged_3$ChildrenLessThan5Years))
sum(is.na(new_merged_3$NumberOfChildren))
sum(is.na(new_merged_3$ApparelExperience))
sum(is.na(new_merged_3$ReasonForLeaving))
sum(is.na(new_merged_3$Height.cm))
sum(is.na(new_merged_3$Weight.Kg.))
sum(is.na(new_merged_3$MedicalTest))
sum(is.na(new_merged_3$IQTestScore))
sum(is.na(new_merged_3$LastBasicSalary))
sum(is.na(new_merged_3$FollowingExternalCourses))
sum(is.na(new_merged_3$Resigned))
#There are three columns with N/A Values-ChildrenLessThan5Years,NumberOfChildren,LastBasicSalary
#If there is no previous job, there is no last basic salary, Therefore we have consider it.
df_NopreviousJob<-new_merged_3[is.na(new_merged_3$LastBasicSalary),]
write.csv(df_NopreviousJob,"D:/Employee/NopreviousJob.csv", row.names = FALSE)
#According to these results Last basic salary data is missing the people who have worked before as well.
#Therefore we can fill these details with mean value of salary. But sometimes they have not given details or they may work in unpaid jobs or daily wages.
#Since these data is not accurate. it can be assumed that NA values in last basic salary column as zero.replace all NA values in zero.
new_merged_3$LastBasicSalary[is.na(new_merged_3$LastBasicSalary)]<-0
#.................................................................................................................................
#In here there are 67 missing values in weight column.To each person have a Weight.Therefore it can be replaced by a value.The missing values replaced by column mean value
new_merged_3$Weight.Kg.[is.na(new_merged_3$Weight.Kg.)] <- mean(new_merged_3$Weight.Kg., na.rm = TRUE)
#Ensure whther is there any missing values in this data set weight column
sum(is.na(new_merged_3$Weight.Kg.))
#.................................................................................................................................
#There are two other columns with missing values are ChildrenLessThan5Years and NumberOfChildren columns,Sometimes these columns have missing values since they are not married.
#To observe that we have to merge the both data frames new_merged_3 and merged_per_res_1. Before merging these two data frames first we find are there any columns with empty values
#in new_merged_3 data frame.
new_merged_3$ExtraCurricularActivities[new_merged_3$ExtraCurricularActivities == ""] <- NA
new_merged_3$ApparelRelatedVocationalQualification[new_merged_3$ApparelRelatedVocationalQualification == ""] <- NA
new_merged_3$PreviousJob[new_merged_3$PreviousJob == ""] <- NA
new_merged_3$ExperienceSection[new_merged_3$ExperienceSection == ""] <- NA
new_merged_3$RelativesInApparel[new_merged_3$RelativesInApparel == ""] <- NA
new_merged_3$SpousesOccupation[new_merged_3$SpousesOccupation == ""] <- NA
new_merged_3$FamilyOpinionAboutTheJob[new_merged_3$FamilyOpinionAboutTheJob == ""] <- NA
new_merged_3$Referel[new_merged_3$Referel == ""] <- NA
new_merged_3$ExpectationOfDoingTheJob[new_merged_3$ExpectationOfDoingTheJob == ""] <- NA
new_merged_3$AvailabilityOfTransportNearTheResidence[new_merged_3$AvailabilityOfTransportNearTheResidence == ""] <- NA
new_merged_3$ReasonForChoosingApparel[new_merged_3$ReasonForChoosingApparel == ""] <- NA
new_merged_3$ContributionToTheFamilyIncome[new_merged_3$ContributionToTheFamilyIncome == ""] <- NA
new_merged_3$PersonalImpression[new_merged_3$PersonalImpression == ""] <- NA
new_merged_3$AccommodationFee[new_merged_3$AccommodationFee == ""] <- NA
new_merged_3$RetentionCategory[new_merged_3$RetentionCategory == ""] <- NA
new_merged_3$SelectedDepartmente[new_merged_3$SelectedDepartment == ""] <- NA
new_merged_3$ApparelExperience[new_merged_3$ApparelExperience == ""] <- NA
new_merged_3$ReasonForLeaving[new_merged_3$ReasonForLeaving == ""] <- NA
new_merged_3$Height.cm[new_merged_3$Height.cm == ""] <- NA
new_merged_3$MedicalTest[new_merged_3$MedicalTest == ""] <- NA
new_merged_3$IQTestScore[new_merged_3$IQTestScore == ""] <- NA
new_merged_3$FollowingExternalCourses[new_merged_3$FollowingExternalCourses == ""] <- NA
new_merged_3$Resigned[new_merged_3$Resigned == ""] <- NA
sum(is.na(new_merged_3$ExtraCurricularActivities))
sum(is.na(new_merged_3$ApparelRelatedVocationalQualification))
sum(is.na(new_merged_3$PreviousJob))
sum(is.na(new_merged_3$ExperienceSection))
sum(is.na(new_merged_3$RelativesInApparel))
sum(is.na(new_merged_3$SpousesOccupation))
sum(is.na(new_merged_3$FamilyOpinionAboutTheJob))
sum(is.na(new_merged_3$Referel))
sum(is.na(new_merged_3$ExpectationOfDoingTheJob))
sum(is.na(new_merged_3$AvailabilityOfTransportNearTheResidence))
sum(is.na(new_merged_3$ReasonForChoosingApparel))
sum(is.na(new_merged_3$ContributionToTheFamilyIncome))
sum(is.na(new_merged_3$PersonalImpression))
sum(is.na(new_merged_3$AccommodationFee))
sum(is.na(new_merged_3$RetentionCategory))
sum(is.na(new_merged_3$SelectedDepartment))
sum(is.na(new_merged_3$ApparelExperience))
sum(is.na(new_merged_3$ReasonForLeaving))
sum(is.na(new_merged_3$Height.cm))
sum(is.na(new_merged_3$MedicalTest))
sum(is.na(new_merged_3$IQTestScore))
sum(is.na(new_merged_3$FollowingExternalCourses))
sum(is.na(new_merged_3$Resigned))
#According to this results it can be concluded that AccommodationFee,ReasonForLeaving,SpousesOccupation,ExperienceSection columns have missing values. All these columns are catergorical
#variables.
#First consider on experience section,it may be not applicable since these participants have no prior experience, or since this is their first job.
#Check whther their previous job section have values with 0 or two.
df_NopreviousJob<-new_merged_3[is.na(new_merged_3$ExperienceSection),]
write.csv(df_NopreviousJob,"D:/Employee/NopreviousExperience.csv", row.names = FALSE)
sum(df_NopreviousJob$PreviousJob==1)
#.......................................................................................................................................
#This shows that the people who worked before in the apperal industry have not answered to this question.ExperienceSection has catergory called other which denotes number 2.
#Therfore all the empty values will be filled by number 2
new_merged_3$ExperienceSection[is.na(new_merged_3$ExperienceSection)]<-2
sum(is.na(new_merged_3$ExperienceSection))
#............................................................................................................................................
#reason for leaving column.If they not resigned, this column is not applicable. In that case we put 0 and if not put 1 for other reson catergory
if (new_merged_3$Resigned==1){
new_merged_3$ReasonForLeaving[is.na(new_merged_3$ReasonForLeaving)]<-1
}else{
new_merged_3$ReasonForLeaving[is.na(new_merged_3$ReasonForLeaving)]<-0
}
sum(is.na(new_merged_3$ReasonForLeaving))
#............................................................................................................................................
#SpouseOccupation- All missing values because of husband died or divorced or actually her husband has no job or value missing.
#Therefore we will assume all missing data reflects no job value. Repalce all N/As with have no Job option number 3.
new_merged_3$SpousesOccupation[is.na(new_merged_3$SpousesOccupation)]<-3
sum(is.na(new_merged_3$SpousesOccupation))
write.csv(new_merged_3,"D:/Employee/new_merged_3.csv", row.names = FALSE)
names(new_merged_3)
new_merged_4<-new_merged_3
new_merged_5<-new_merged_4[, -c(31:32)]
names(new_merged_5)
#............................................................................................................................................
#AccommodationFee column also has missing values- it has following catergories
#1500/= or Less than 1500/=','Over 1500/= and 3000/= or below','Over 3000/= and 4500/= or below','Over 4500/= and 6000/= or below',' Over 6000/='
#If participant coming from her/his own home there is no accomodation fee.
#therefore we have to first find it. To find it we have to merge the other data frame as well.
#............................................................................................................................................
#.................................................merging two data frames-new_merged_3 and merged_per_res_1....................................
#left side data frame-new_merged_3and viseversa
Analysis_df<-merge(new_merged_5,merged_per_res_1,by=c("ReferenceNumber"),all.x = TRUE)
head(Analysis_df)
names(Analysis_df)
#drop ID and REsigned.y Columns
drops <- c("ID","Resigned.y","Selection")
Analysis_df_new<-Analysis_df[,!(names(Analysis_df)%in%drops)]
write.csv(Analysis_df_new,"D:/Employee/Analysis_df.csv", row.names = FALSE)
#............................................................................................................................................
#Replace missing values in number of children column
names(Analysis_df_new)
mean(Analysis_df_new$NumberOfChildren, na.rm = TRUE)
if (Analysis_df_new$CivilStatus==0 &is.na(Analysis_df_new$NumberOfChildren)){
Analysis_df_new$NumberOfChildren[is.na(Analysis_df_new$NumberOfChildren)]<-0
}else{
Analysis_df_new$NumberOfChildren[is.na(Analysis_df_new$NumberOfChildren)]<-1
}
sum(is.na(Analysis_df_new$NumberOfChildren))
#............................................................................................................................................
#Replace missing values in ChildrenLessThan5Years column
mean(Analysis_df_new$ChildrenLessThan5Years, na.rm = TRUE)
if (Analysis_df_new$NumberOfChildren==0 &is.na(Analysis_df_new$ChildrenLessThan5Years)){
Analysis_df_new$ChildrenLessThan5Years[is.na(Analysis_df_new$ChildrenLessThan5Years)]<-0
}else{
Analysis_df_new$ChildrenLessThan5Years[is.na(Analysis_df_new$ChildrenLessThan5Years)]<-0
}
sum(is.na(Analysis_df_new$ChildrenLessThan5Years))
#...........................................................................................................................................
#Replace missing values in AccommodationFee column
mean(Analysis_df_new$AccommodationFee, na.rm = TRUE)
sapply(Analysis_df_new$AccommodationFee, typeof)
Analysis_df_new$AccommodationFee <- as.numeric(as.character(Analysis_df_new$AccommodationFee))
sapply(Analysis_df_new$AccommodationFee, typeof)
mean(Analysis_df_new$AccommodationFee, na.rm = TRUE)
if (Analysis_df_new$Residence==1 &is.na(Analysis_df_new$AccommodationFee)){
Analysis_df_new$AccommodationFee[is.na(Analysis_df_new$AccommodationFee)]<-3
}else{
Analysis_df_new$AccommodationFee[is.na(Analysis_df_new$AccommodationFee)]<-0
}
sum(is.na(Analysis_df_new$AccommodationFee))
#...........................................................................................................................................
#To move on to a further analysis, we need to convert all columns in data frame from character, string to numeric types.
#First find the character type column and convert them to numeric types
sapply(Analysis_df_new, typeof)
#character types columns are PreviousJob,ExperienceSection,SpousesOccupation,FamilyOpinionAboutTheJob,Referel,ExpectationOfDoingTheJob,AvailabilityOfTransportNearTheResidence,
#ReasonForChoosingApparel,ContributionToTheFamilyIncome,PersonalImpression,RetentionCategory,SelectedDepartment,ReasonForLeaving,MedicalTest,IQTestScore,FollowingExternalCourses,
#Gender,PermanentResidenceDistrict,Residence,CivilStatus,HighestEducationalQualification
Analysis_df_new$PreviousJob <- as.numeric(as.character(Analysis_df_new$PreviousJob))
Analysis_df_new$ExperienceSection <- as.numeric(as.character(Analysis_df_new$ExperienceSection))
Analysis_df_new$SpousesOccupation <- as.numeric(as.character(Analysis_df_new$SpousesOccupation))
Analysis_df_new$FamilyOpinionAboutTheJob <- as.numeric(as.character(Analysis_df_new$FamilyOpinionAboutTheJob))
Analysis_df_new$Referel <- as.numeric(as.character(Analysis_df_new$Referel))
Analysis_df_new$ExpectationOfDoingTheJob <- as.numeric(as.character(Analysis_df_new$ExpectationOfDoingTheJob))
Analysis_df_new$AvailabilityOfTransportNearTheResidence <- as.numeric(as.character(Analysis_df_new$AvailabilityOfTransportNearTheResidence))
Analysis_df_new$ReasonForChoosingApparel <- as.numeric(as.character(Analysis_df_new$ReasonForChoosingApparel))
Analysis_df_new$ContributionToTheFamilyIncome <- as.numeric(as.character(Analysis_df_new$ContributionToTheFamilyIncome))
Analysis_df_new$PersonalImpression <- as.numeric(as.character(Analysis_df_new$PersonalImpression))
Analysis_df_new$RetentionCategory <- as.numeric(as.character(Analysis_df_new$RetentionCategory))
Analysis_df_new$SelectedDepartment <- as.numeric(as.character(Analysis_df_new$SelectedDepartment))
Analysis_df_new$ReasonForLeaving <- as.numeric(as.character(Analysis_df_new$ReasonForLeaving))
Analysis_df_new$MedicalTest <- as.numeric(as.character(Analysis_df_new$MedicalTest))
Analysis_df_new$IQTestScore <- as.numeric(as.character(Analysis_df_new$IQTestScore))
Analysis_df_new$FollowingExternalCourses <- as.numeric(as.character(Analysis_df_new$FollowingExternalCourses))
Analysis_df_new$Gender <- as.numeric(as.character(Analysis_df_new$Gender))
Analysis_df_new$PermanentResidenceDistrict <- as.numeric(as.character(Analysis_df_new$PermanentResidenceDistrict))
Analysis_df_new$Residence <- as.numeric(as.character(Analysis_df_new$Residence))
Analysis_df_new$CivilStatus <- as.numeric(as.character(Analysis_df_new$CivilStatus))
Analysis_df_new$HighestEducationalQualification <- as.numeric(as.character(Analysis_df_new$HighestEducationalQualification))
Analysis_df_new$IQTestScore[is.na(Analysis_df_new$IQTestScore)]<-mean(Analysis_df_new$IQTestScore, na.rm = TRUE)
sum(is.na(Analysis_df_new$IQTestScore))
Analysis_df_new$IQTestScore <- as.numeric(as.character(Analysis_df_new$IQTestScore))
sapply(Analysis_df_new, typeof)
#...........................................................................................................................................
#............................................Descriptive Statistics..........................................................
#We can use Analysis_df_ed data frame for analysis and ML model development
ncol(Analysis_df_new)
nrow(Analysis_df_new)
dim(Analysis_df_new)
summary(Analysis_df_new)
#...........................................................................................................................................
#But here we can see still data type of selected department is not changed. Therefore we have to change the data type of this column and there are 1 NA values in some columns
#First we change it.
Analysis_df_new_1<-Analysis_df_new
df_one<-Analysis_df_new_1[!is.na(Analysis_df_new_1$Gender), ]
summary(df_one)
write.csv(Analysis_df_new,"D:/Employee/df_one.csv", row.names = FALSE)
#...........................................................................................................................................
#Finding outliers
names(df_one)
#We can detect outliers in a data frame column using various methods
#Box_plot Visualization
#Follow statistical tests-Grubbs’s test,Dixon’s test,Rosner’s test
#But this data set consisits of both catergorical and continuous variables as well. Therefore we can use HDoutlier package to detect
#outlier in a data set with continuos and catergorical variables both.
install.packages("HDoutliers")
library(HDoutliers)
out.W<-HDoutliers(df_one[,-1])
plotHDoutliers(df_one[,-1], out.W)
#According to the graph, Which produces the following output where no outliers appear (outliers are denoted by an asterisk rather than a blue point)
#Therefore no need of outlier imputation
#...........................................................................................................................................
#Normalization of data
#since we are going to develop a machine learning model it is important to standerdize the data.
#If we don't normalize the data, the machine learning algorithm will be dominated by the variables that use a larger scale,
#adversely affecting model performance. This makes it imperative to normalize the data.
#First we have to recognize the continuous variables are normally distributed or not.
#The continuous varaibles in this data set is ChildrenLessThan5Years,"NumberOfChildren,Height.cm.,Weight.Kg.,IQTestScore,LastBasicSalary
#using shapiro.test() check whther data is normally distributed or not
shapiro.test(df_one$ChildrenLessThan5Years)
#From the output, the p-value < 0.05 implying that the distribution of the data are significantly different from normal distribution.
#Further the data is not normally distributed
shapiro.test(df_one$NumberOfChildren)
#From the output, the p-value < 0.05 implying that the distribution of the data are significantly different from normal distribution.
#Further the data is not normally distributed
shapiro.test(df_one$Height.cm.)
#From the output, the p-value < 0.05 implying that the distribution of the data are significantly different from normal distribution.
#Further the data is not normally distributed
shapiro.test(df_one$Weight.Kg.)
#From the output, the p-value < 0.05 implying that the distribution of the data are significantly different from normal distribution.
#Further the data is not normally distributed
shapiro.test(df_one$IQTestScore)
#From the output, the p-value < 0.05 implying that the distribution of the data are significantly different from normal distribution.
#Further the data is not normally distributed
shapiro.test(df_one$LastBasicSalary)
#From the output, the p-value < 0.05 implying that the distribution of the data are significantly different from normal distribution.
#Further the data is not normally distributed
#..................................................................................................................................
#Therefore, it should be need to do standerdization
#Since this data set is not consists any outliers ,we use standerdization method.
#Standardization is a technique in which all the features are centred around zero and have roughly unit variance.
install.packages("caret")
library(caret)
names(df_one)
preproc1 <- preProcess(df_one[,c(17:18,21:22,24:25)], method=c("center", "scale"))
norm1 <- predict(preproc1, df_one[,c(17:18,21:22,24:25)])
summary(norm1)
#..................................................................................................................................
#merge df_resigned data frame to this data frame again to better results
drops <- c("Resigned.x")
df_new<-df_one[,!(names(df_one)%in%drops)]
names(df_new)
df_ed<-merge(df_new,df_resigned,by=c("ReferenceNumber"),all.x = TRUE)
names(df_ed)
drops <- c("ID")
df_ed_1<-df_ed[,!(names(df_ed)%in%drops)]
sum(is.na(df_ed_1$Resigned))
dim(df_ed_1)
df_ed_1$Resigned[is.na(df_ed_1$Resigned)]<-0
sapply(df_ed_1$Resigned, typeof)
sum(df_ed_1$Resigned==1.0)
sum(df_ed_1$Resigned==0.0)
write.csv(df_ed_1,"D:/Employee/df_ed_1.csv", row.names = FALSE)
df_ed_2<-df_ed_1
#.........................................DATA CLEANING AND DATA WRANGLING PART IS OVER.............................................................
#.........................................................DATA PREPARATION.........................................................................
#original data set should be seperated as train and test data set
#will split data frame into train(70%) and test(30%)
install.packages("dplyr")
library(dplyr)
train_df<-sample_frac(df_ed_2, 0.7)
sid<-as.numeric(rownames(train_df)) # because rownames() returns character
test_df<-df_ed_2[-sid,]
#get the shape of each data frames
dim(train_df)
dim(test_df)
names(train_df)
X_train<-train_df[0:31]
names(X_train)
dim(X_train)
Y_train<-train_df['Resigned']
dim(Y_train)
names(test_df)
X_test<-test_df[0:31]
names(X_test)
dim(X_test)
Y_test<-test_df['Resigned']
dim(Y_test)
#To check whther we can apply classification model or regression model
sum(train_df$Resigned==1.0)
sum(train_df$Resigned==0.0)
sum(test_df$Resigned==1.0)
sum(test_df$Resigned==0.0)
install.packages("dplyr")
install.packages("data.table")
install.packages("ggplot2")
install.packages("caret")
install.packages("dplyr")
install.packages("dplyr")
install.packages("data.table")
install.packages("ggplot2")
set.seed(7)
control <- trainControl(method="repeatedcv", number=10, repeats=3)
fit.rf <- train(Resigned~., data = train_df, method="rf", metric="Accuracy", trControl=control, ntree=2000)
fit.rf <- train(Resigned~.,data = train_df, method="rf", metric="Accuracy", trControl=control, ntree=2000)
rf <- randomForest(Resigned~.,data = train_df)
fit.rf <- train(Resigned~.,data = train_df, method="rf", metric="Accuracy", trControl=control, ntree=2000)
fit.rf <- train(Resigned~.,data = X_train, method="rf", metric="Accuracy", trControl=control, ntree=2000)
control <- trainControl(method="repeatedcv", number=10, repeats=3)
fit.rf <- train(train_df$Resigned~.,data = X_train, method="rf", metric="Accuracy", trControl=control, ntree=2000)
rf <- randomForest(Resigned~.,data = train_df)
install.packages("aod")
library(aod)
train_df$Resigned <- factor(train_df$Resigned)
mylogit <- glm(admit ~ ., data = train_df, family = "binomial")
train_df$Resigned <- factor(train_df$Resigned)
mylogit <- glm(Resigned ~ ., data = train_df, family = "binomial")
summary(mylogit)
drops <- c("ReferenceNumber")
train_df<-train_df[,!(names(train_df)%in%drops)]
test_df<-test_df[,!(names(test_df)%in%drops)]
train_df$Resigned <- factor(train_df$Resigned)
mylogit <- glm(Resigned ~ ., data = train_df, family = "binomial")
summary(mylogit)
## CIs using profiled log-likelihood
confint(mylogit)
## CIs using standard errors
confint.default(mylogit)
wald.test(b = coef(mylogit), Sigma = vcov(mylogit), Terms = 4:6)
wald.test(b = coef(mylogit), Sigma = vcov(mylogit), Terms = 0:16)
wald.test(b = coef(mylogit), Sigma = vcov(mylogit), Terms = 0:3)
wald.test(b = coef(mylogit), Sigma = vcov(mylogit), Terms = 2:3)
wald.test(b = coef(mylogit), Sigma = vcov(mylogit), Terms = 6:9)
## odds ratios only
exp(coef(mylogit))
newdata1 <- with(train_df, data.frame(test_df))
newdata1
newdata1$preResigned <- predict(mylogit, newdata = newdata1, type = "response")
newdata1
